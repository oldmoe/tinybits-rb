var search_data = {"index":{"searchIndex":["tinybits","packer","unpacker","<<()","buffer=()","decode()","dump()","encode()","finished?()","load()","new()","new()","pack()","pack()","pop()","push()","reset()","to_s()","unpack()","unpack()"],"longSearchIndex":["tinybits","tinybits::packer","tinybits::unpacker","tinybits::packer#<<()","tinybits::unpacker#buffer=()","tinybits::unpacker#decode()","tinybits::packer#dump()","tinybits::packer#encode()","tinybits::unpacker#finished?()","tinybits::unpacker#load()","tinybits::packer::new()","tinybits::unpacker::new()","tinybits::pack()","tinybits::packer#pack()","tinybits::unpacker#pop()","tinybits::packer#push()","tinybits::packer#reset()","tinybits::packer#to_s()","tinybits::unpack()","tinybits::unpacker#unpack()"],"info":[["TinyBits","","TinyBits.html","","<p>A Ruby extension for fast binary serialization and deserialization of Ruby objects.\n"],["TinyBits::Packer","","TinyBits/Packer.html","","<p>The Packer class handles serialization of Ruby objects to the TinyBits binary format.\n"],["TinyBits::Unpacker","","TinyBits/Unpacker.html","","<p>The Unpacker class handles deserialization of TinyBits binary format to Ruby objects.\n"],["<<","TinyBits::Packer","TinyBits/Packer.html#method-i-3C-3C","(p1)","<p>Appends a packed object to the current buffer. Inserts a separator when appending to non-empty buffer. …\n"],["buffer=","TinyBits::Unpacker","TinyBits/Unpacker.html#method-i-buffer-3D","(p1)",""],["decode","TinyBits::Unpacker","TinyBits/Unpacker.html#method-i-decode","(p1)",""],["dump","TinyBits::Packer","TinyBits/Packer.html#method-i-dump","(p1)","<p>Packs a Ruby object into a binary string. Supports Ruby types: String, Array, Hash, Integer, Float, nil, …\n"],["encode","TinyBits::Packer","TinyBits/Packer.html#method-i-encode","(p1)","<p>Packs a Ruby object into a binary string. Supports Ruby types: String, Array, Hash, Integer, Float, nil, …\n"],["finished?","TinyBits::Unpacker","TinyBits/Unpacker.html#method-i-finished-3F","()",""],["load","TinyBits::Unpacker","TinyBits/Unpacker.html#method-i-load","(p1)",""],["new","TinyBits::Packer","TinyBits/Packer.html#method-c-new","()","<p>Initializes a new Packer object\n<p>@return [Packer] The initialized packer object.\n"],["new","TinyBits::Unpacker","TinyBits/Unpacker.html#method-c-new","()",""],["pack","TinyBits","TinyBits.html#method-c-pack","(object)","<p>packs an object to a binary string @param obj [Object] The Ruby object to pack. @return [String] The …\n"],["pack","TinyBits::Packer","TinyBits/Packer.html#method-i-pack","(p1)","<p>Packs a Ruby object into a binary string. Supports Ruby types: String, Array, Hash, Integer, Float, nil, …\n"],["pop","TinyBits::Unpacker","TinyBits/Unpacker.html#method-i-pop","()",""],["push","TinyBits::Packer","TinyBits/Packer.html#method-i-push","(p1)","<p>Appends a packed object to the current buffer. Inserts a separator when appending to non-empty buffer. …\n"],["reset","TinyBits::Packer","TinyBits/Packer.html#method-i-reset","()",""],["to_s","TinyBits::Packer","TinyBits/Packer.html#method-i-to_s","()","<p>Returns the current packed buffer as a string.\n<p>@return [String] The current packed buffer contents (frozen). …\n"],["unpack","TinyBits","TinyBits.html#method-c-unpack","(buffer)","<p>unpacks an object from a binary string @param buffer [String] The Ruby string holding the packed buffer. …\n"],["unpack","TinyBits::Unpacker","TinyBits/Unpacker.html#method-i-unpack","(p1)",""]]}}